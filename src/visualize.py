import numpy as np
import matplotlib.pyplot as plt


class Visualizer:
    @staticmethod
    def display_sample(image, mask):
        fig, axes = plt.subplots(1, 3, figsize=(15, 5))

        # Plot the original image
        axes[0].imshow(image)
        axes[0].set_title('Original Image')

        # Plot the original mask
        axes[1].imshow(mask)
        axes[1].set_title('Original Mask')

        # Overlay the mask on the image
        overlay = np.where(mask[:, :, :3] > 0, [1, 1, 1], image)
        axes[2].imshow(overlay)

        # Remove axis labels
        for ax in axes:
            ax.axis('off')

        plt.show()

    @staticmethod
    def display_feature_maps(backbone, image):
        # Get the feature maps from the backbone
        feature_maps = backbone.model.predict(np.expand_dims(image, axis=0))[0]

        # Get the number of feature maps
        num_feature_maps = feature_maps.shape[-1]

        # Create a grid of images
        fig, axes = plt.subplots((num_feature_maps + 15) // 16, 16, figsize=(15, 15))

        # Plot each feature map
        for i, ax in enumerate(axes.flat):
            if i < num_feature_maps:
                ax.imshow(feature_maps[0, :, :, i], cmap='viridis')
            ax.axis('off')

        plt.show()


# TODO:

# Component-Specific Visualizations
        
#     Backbone:
#         visualize_feature_map(backbone, image): Takes an image and the backbone model. Displays the feature maps generated by the backbone for the input image.

#     RPN:
#         visualize_anchors(image, anchors): Takes an image and a set of pre-defined anchors. Overlays the anchors on the image to visualize their distribution.
#         visualize_proposals(image, proposals): Displays top-scoring region proposals (from RPN's output) on the input image.

#     ROI Align:
#         visualize_roi_align(image, feature_map, rois): Takes an image, the feature map, and a list of ROIs. Highlights the ROIs on the image and perhaps shows the corresponding extracted, aligned features visually.

#     Classifier and Bounding Box Regressor:
#         visualize_predictions(image, boxes, labels, scores): Displays final classification predictions (bounding boxes, class labels, and confidence scores) overlayed on the input image.

#     Mask Head:
#         visualize_mask_predictions(image, masks, labels, scores): Displays predicted instance masks along with bounding boxes, class labels, and scores.

# Implementation Tips

#     Modularity: Structure your visualize.py with functions or classes to encapsulate visualization logic.
#     Flexibility: Allow for customization of colors, line widths, etc. in your visualization functions.
#     Integration: Incorporate these visualization functions strategically during model development and debugging. You can call them after each component is processed to check the outputs.
